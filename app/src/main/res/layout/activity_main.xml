<?xml version="1.0" encoding="utf-8"?>

<!--借助DrawerLayout ,实现滑动菜单.--><!--DrawerLayout只能有两个子控件，一个主屏幕显示的内容，另一个滑动菜单中显示到内容，（多一个子控件就会报错）-->

<android.support.v4.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">


    <!--第一个子控件：FrameLayout-->
    <!-- 11.把<FrameLayout换成CoordinatorLayout：一个增强版的FrameLayout,可监听其子控件的各种事情， 然后自动帮我们做出最合理的响应。-->
    <!--比如：进行此操作之前Snackbar的消息框遮住了悬浮按钮，进行此操作之后，悬浮按钮往上挪了一下高度，没有被挡住-->
    <!--<FrameLayout-->
    <android.support.design.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">


        <!--17.CoordinatorLayout是一个加强版的FrameLayout,FrameLayout中的所有控件在不指明位置的情况下-->
       <!-- 默认都会败在布局左上角，从而产生遮挡现象。使用AppBarLayout(实际上是一个垂直方向的LinearLayout,它-->
        <!--内部使用了很多滚动事件的封装)解决此问题。-->

        <!--17(1).为解决ToolBar被RecyclerView遮挡的问题，只需两步：-->
        <!--第一步：将ToorBar嵌套到AppBarLayout里面。-->
        <android.support.design.widget.AppBarLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <!--1(1).弹出的菜单项-->
            <!--17(3).用app:layout_scrollFlags属性来实现当AppBarLayout接收到滚动事件时，它的内部子控件可以指定如何去影响这些控件-->
            <!-- scroll：当RecyclerView向上滚动时，ToolBar会跟随着向上滚动并隐藏-->
             <!--enterAlways：当RecyclerView向下滚动时，ToolBar会跟随着向下滚动并重新显示-->
             <!--snap：当ToolBar还没完全隐藏或显示时，会根据当前滚动的距离，自动选择是隐藏还是显示-->

            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                android:background="?attr/colorPrimary"
                android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
                app:layout_scrollFlags="scroll|enterAlways|snap"/>


        </android.support.design.widget.AppBarLayout>


        <!--18(1).SwipeRefreshLayout是用于实现下拉刷新功能的核心类；把需要实现下拉刷的控件放置在SwipeRefreshLayout中即可-->
        <android.support.v4.widget.SwipeRefreshLayout
            android:id="@+id/swipe_refresh"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_behavior="@string/appbar_scrolling_view_behavior">

            <!--12.进入卡片式布局学习，添加一个RecyclerView,并设置宽度和高度-->
            <!--17(2).第二步：使用app:layout_behavior属性给RecyclerView指定一个布局行为。-->
            <!--app:layout_behavior="@string/appbar_scrolling_view_behavior"，在进行到第18点时会被移到SwipeRefreshLayout中-->
            <android.support.v7.widget.RecyclerView
                android:id="@+id/recycler_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

        </android.support.v4.widget.SwipeRefreshLayout>


        <!--悬浮窗口,elevation指定悬浮高度 app:elevation="8dp" -->
        <android.support.design.widget.FloatingActionButton
            android:id="@+id/fab"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom|end"
            android:layout_margin="16dp"
            android:src="@drawable/ic_done" />
        <!--   </FrameLayout>-->
    </android.support.design.widget.CoordinatorLayout>


    <!--7.定义好NavigationView-->
    <!--第二个子控件：NavigationView：定制滑动菜单页面（需要添加依赖项）-->
    <android.support.design.widget.NavigationView
        android:id="@+id/nav_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        app:headerLayout="@layout/nav_header"
        app:menu="@menu/nav_menu" />


    <!--关于第二个控件（暂时使用），layout_gravity属性必须指定，告诉DrawerLayout滑动菜单是在左边还是在右边-->
    <!--<TextView-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--android:layout_gravity="start"-->
        <!--android:text="菜单"-->
        <!--android:textSize="30dp"-->
        <!--android:background="#fff"/>-->

</android.support.v4.widget.DrawerLayout>