<?xml version="1.0" encoding="utf-8"?>


    <!--20.充分利用系统状态栏空间：想要让背景图和2状态栏融合，需要借助android:fitsSystemWindows属性来实现。在CoordinatorLayout
    、AppBarLayout、CollapsingToolbarLayout这种嵌套结构的布局中，将控件的该属性设置为true，表示该控件出现在状态栏里。-->
    <!--水果标题栏中的ImageView应该设置这属性，但是不能只给ImageView设置，这样没用，还要给它的所有父布局设置该属性。-->
<!--20.将android:fitsSystemWindows属性设置好了还是没用，还必须在程序的主题颜色中将状态栏颜色指定成透明色才行，
在主题中将android:statusBarColor的属性值指定为android:color/transparent就可以了-->


<!--19.学习可折叠式标题栏:这里只有两部分：水果标题栏和水果内容详情-->
<!--19(1).定义xmlns:app命名空间-->
<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <!--19(2).-->
    <android.support.design.widget.AppBarLayout
        android:id="@+id/appBar"
        android:layout_width="match_parent"
        android:layout_height="250dp"
        android:fitsSystemWindows="true">


        <!--19(3).CollapsingToolbarLayout是一个作用于ToorBar基础上的布局，可以让ToorBar效果更丰富-->
        <!--CollapsingToolbarLayout不能独立存在，只能作为AppBarLayout的直接子布局来使用,而AppBarLayout又必须是CoordinatorLayout的子布局-->
        <!--cotentScrim用于指定CollapsingToolbarLayout在趋于折叠状态以及折叠之后的背景色-->
        <!--scroll：表示CollapsingToolbarLayout会随水果内容详情的滚动一起滚动-->
        <!--exitUntilCollapsed：表示当CollapsingToolbarLayout随着滚动完成折叠之后就保留在界面上，不会移出屏幕-->
        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
            android:fitsSystemWindows="true"
            app:contentScrim="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">


            <!--ImageView+Toolbar,说明这个高级的标题栏将由一个普通的标题栏加上图片组合而成-->
            <!--19(5).collapseMode折叠模式:parallax表示在折叠的过程中位置产生一定的错位偏移-->
            <ImageView
                android:id="@+id/fruit_image_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                android:fitsSystemWindows="true"
                app:layout_collapseMode="parallax"/>


            <!--19(6).collapseMode折叠模式:pin表示在折叠的过程中位置始终保持不变-->
            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"/>
        </android.support.design.widget.CollapsingToolbarLayout>
    </android.support.design.widget.AppBarLayout>



    <!--19(7).水果内容的详情的最外布局使用了NestedScrollView，它与AppBarLayout是平级的-->
    <!--我们学过的ScrollView允许使用滚动的方式来查看屏幕以外的数据，而NestedScrollView在此
    基础上还增减了嵌套响应滚动事件的功能-->
    <!--由于CoordinatorLayout 本身可以响应滚动事件，我们在它的内部就需要使用NestedScrollView
    或RecyclerView这样的布局，另外通过layout_behavior指定了一个布局行为。-->
    <android.support.v4.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">


        <!--19(8).不管是ScrollView还是NestedScrollView，他们内部都只允许
       存在一个直接子布局，如果我们想要放入很多东西的话，通常先嵌套一个LinearLayout-->
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">


            <!--19(9).用TextView显示水果的详细内容并将TextView放在一个卡片式布局当中。
            CardView的marginTop设为35dp，为下面写的东西留空间-->
            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="15dp"
                android:layout_marginLeft="15dp"
                android:layout_marginRight="15dp"
                android:layout_marginTop="35dp"
                app:cardCornerRadius="4dp">

                <TextView
                    android:id="@+id/fruit_content_text"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_margin="10dp" />
            </android.support.v7.widget.CardView>
        </LinearLayout>


    </android.support.v4.widget.NestedScrollView>



    <!--悬浮按钮，它与AppBarLayout和NestedScrollView是平级的。用layout_anchor设置锚点，
    将锚点设置为AppBarLayout，这样悬浮按钮就会出现在水果标题栏的区域内。用anchorGravity将悬浮按钮定位在标题栏的右下角-->
    <android.support.design.widget.FloatingActionButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:src="@drawable/ic_comment"
        app:layout_anchor="@id/appBar"
        app:layout_anchorGravity="bottom|end"/>

</android.support.design.widget.CoordinatorLayout>
